Index: PEAK-Rules-0.5a1.dev-r2582/Criteria.txt
===================================================================
--- PEAK-Rules-0.5a1.dev-r2582.orig/Criteria.txt
+++ PEAK-Rules-0.5a1.dev-r2582/Criteria.txt
@@ -302,8 +302,8 @@ of intersecting them will be a conjuncti
     >>> intersect(float, MySet([int, str]))
     MySet([<type 'float'>, <type 'int'>, <type 'str'>])
 
-    >>> intersect(MySet([d, c]), MySet([int, str]))
-    MySet([<class 'd'>, <class ...c...>, <type 'str'>])
+    >>> intersect(MySet([d, c]), MySet([int, str])) == MySet([d, c, str])
+    True
 
 If you want to ensure that all items in a set are of appropriate type or value,
 you can override ``__init__`` to do the checking, and raise an appropriate
@@ -462,13 +462,15 @@ contents.  In other words::
     ... ])
     True
 
-    >>> intersect(int_or_str, Conjunction([long, float]))
-    DisjunctionSet([Conjunction([<type 'int'>, <type 'long'>, <type 'float'>]),
-                 Conjunction([<type 'str'>, <type 'long'>, <type 'float'>])])
-
-    >>> intersect(Conjunction([int, str]), long_or_float)
-    DisjunctionSet([Conjunction([<type 'int'>, <type 'str'>, <type 'long'>]),
-                 Conjunction([<type 'int'>, <type 'str'>, <type 'float'>])])
+    >>> intersect(int_or_str, Conjunction([long, float])) == DisjunctionSet([
+    ...     Conjunction([int, long, float]), Conjunction([str, long, float])
+    ... ])
+    True
+
+    >>> intersect(Conjunction([int, str]), long_or_float) == DisjunctionSet([
+    ...     Conjunction([int, str, long]), Conjunction([int, str, float])
+    ... ])
+    True
 
 As you can see, this is the heart of the process that allows expressions like
 ``(A or B) and (C or D)`` to be transformed into their disjunctive normal
@@ -974,8 +976,10 @@ will be AST-like structures.)
 
 Creating a test with disjunct criteria actually returns a set of tests::
 
-    >>> Test("x", DisjunctionSet([int, str]))
-    DisjunctionSet([Test('x', <type 'int'>), Test('x', <type 'str'>)])
+    >>> Test("x", DisjunctionSet([int, str])) == DisjunctionSet([
+    ...     Test('x', str), Test('x', int)
+    ... ])
+    True
 
 So the ``disjuncts()`` of a test will always just be the test itself::
 
@@ -995,9 +999,10 @@ a disjunction of tests::
     ...     Test('x',
     ...         NotObjects([IsObject('foo',False), IsObject('bar',False)])
     ...     )
-    ... )
-    DisjunctionSet([Test('x', IsObject('foo', True)),
-                    Test('x', IsObject('bar', True))])
+    ... ) == DisjunctionSet([Test('x', IsObject('foo', True)),
+    ...     Test('x', IsObject('bar', True))
+    ... ])
+    True
 
 Intersecting two tests for the same dispatch expression returns a test whose
 criterion is the intersection of the original tests' criteria::
Index: PEAK-Rules-0.5a1.dev-r2582/Indexing.txt
===================================================================
--- PEAK-Rules-0.5a1.dev-r2582.orig/Indexing.txt
+++ PEAK-Rules-0.5a1.dev-r2582/Indexing.txt
@@ -1083,6 +1083,7 @@ Value Map Generation
 --------------------
 
     >>> from peak.rules.indexing import split_ranges
+    >>> from peak.util.extremes import Min, Max
 
     >>> def dump_ranges(ind, cases):
     ...     exact, ranges = split_ranges(*ind.seed_bits(cases))
@@ -1104,12 +1105,14 @@ Value Map Generation
     ({}, [((Min, Max), [])])
 
     >>> ind.add_case(0, Value(19))
-    >>> dump_ranges(ind, ind.known_cases)
-    ({Min: [], 19: [0]}, [((Min, Max), [])])
+    >>> result = dump_ranges(ind, ind.known_cases)
+    >>> result == ({Min: [], 19: [0]}, [((Min, Max), [])])
+    True
 
     >>> ind.add_case(1, Value(23))
-    >>> dump_ranges(ind, ind.known_cases)
-    ({Min: [], 19: [0], 23: [1]}, [((Min, Max), [])])
+    >>> result = dump_ranges(ind, ind.known_cases)
+    >>> result == ({Min: [], 19: [0], 23: [1]}, [((Min, Max), [])])
+    True
 
     >>> ind.add_case(2, Value(23, False))
     >>> dump_ranges(ind, ind.known_cases)
